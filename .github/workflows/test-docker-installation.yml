# ============================================================================
# DSpace 9 Installation Testing with Docker Container
# ============================================================================
#
# PURPOSE: This GitHub Action tests DSpace installation in a Docker container
#          with systemd support, simulating a full Linux environment.
#
# ADVANTAGES:
# - Runs on any GitHub runner (ubuntu-latest)
# - No VM provider dependencies
# - Faster than VM provisioning
# - More reliable and consistent
#
# ============================================================================

name: Test DSpace Installation (Docker)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of installation to test'
        required: true
        default: 'complete'
        type: choice
        options:
          - complete      # Full installation (backend + frontend)
          - backend       # Backend only with prerequisites
          - prerequisites # Just prerequisites
      verbose:
        description: 'Enable verbose Ansible output'
        required: false
        default: false
        type: boolean

# Prevent multiple runs for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  docker-test:
    runs-on: ubuntu-latest
    timeout-minutes: 90  # 1.5 hours max (DSpace build can be slow)

    steps:
      # ======================================================================
      # Step 1: Checkout Repository
      # ======================================================================
      - name: "📦 Checkout repository"
        uses: actions/checkout@v4

      # ======================================================================
      # Step 2: System Information
      # ======================================================================
      - name: "ℹ️ System information"
        run: |
          echo "================================================"
          echo "CI Testing Environment Information"
          echo "================================================"
          echo "Runner OS: $(uname -s)"
          echo "Runner Version: $(uname -r)"
          echo "Runner Architecture: $(uname -m)"
          echo "Available CPU cores: $(nproc)"
          echo "Available memory: $(free -h | grep '^Mem' | awk '{print $2}')"
          echo "Available disk space:"
          df -h /
          echo "Docker version:"
          docker --version
          echo "================================================"

      # ======================================================================
      # Step 3: Create and Start Systemd-enabled Container
      # ======================================================================
      - name: "🐳 Create systemd-enabled Docker container"
        run: |
          echo "================================================"
          echo "Creating Docker container with systemd support"
          echo "================================================"

          # Create a Dockerfile for our systemd-enabled container
          cat > Dockerfile.systemd << 'EOF'
          FROM ubuntu:24.04

          # Avoid interactive prompts during package installation
          ENV DEBIAN_FRONTEND=noninteractive
          ENV container=docker

          # Install systemd and basic utilities
          RUN apt-get update && apt-get install -y \
              systemd \
              systemd-sysv \
              systemd-cron \
              sudo \
              openssh-server \
              python3 \
              python3-pip \
              python3-apt \
              ca-certificates \
              curl \
              wget \
              gnupg \
              lsb-release \
              software-properties-common \
              net-tools \
              iproute2 \
              vim \
              unzip \
              bzip2 \
              xz-utils \
              && rm -rf /tmp/* /var/tmp/*

          # Remove unnecessary systemd units
          RUN rm -f /lib/systemd/system/multi-user.target.wants/* \
              /etc/systemd/system/*.wants/* \
              /lib/systemd/system/local-fs.target.wants/* \
              /lib/systemd/system/sockets.target.wants/*udev* \
              /lib/systemd/system/sockets.target.wants/*initctl* \
              /lib/systemd/system/sysinit.target.wants/systemd-tmpfiles-setup* \
              /lib/systemd/system/systemd-update-utmp*

          # Create admin user with sudo privileges
          RUN useradd -m -s /bin/bash -G sudo admin && \
              echo "admin:admin" | chpasswd && \
              echo "admin ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/admin

          # Configure SSH
          RUN mkdir /var/run/sshd && \
              mkdir -p /home/admin/.ssh && \
              chmod 700 /home/admin/.ssh && \
              chown -R admin:admin /home/admin/.ssh && \
              sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin no/' /etc/ssh/sshd_config && \
              sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config && \
              echo "PubkeyAuthentication yes" >> /etc/ssh/sshd_config

          # Enable SSH service
          RUN systemctl enable ssh

          # Set systemd as entrypoint
          VOLUME ["/sys/fs/cgroup", "/tmp", "/run"]

          # Expose SSH port
          EXPOSE 22

          # Start systemd
          CMD ["/lib/systemd/systemd"]
          EOF

          # Build the Docker image
          echo "Building Docker image..."
          docker build -t dspace-ci-systemd -f Dockerfile.systemd .

          # Run the container with necessary privileges for systemd
          echo "Starting Docker container..."
          docker run -d \
            --name dspace-server \
            --hostname dspace-server \
            --privileged \
            --cgroupns=host \
            -v /sys/fs/cgroup:/sys/fs/cgroup:rw \
            -v $(pwd):/workspace:rw \
            -p 2222:22 \
            -p 8080:8080 \
            -p 8983:8983 \
            -p 4000:4000 \
            -p 5432:5432 \
            dspace-ci-systemd

          # Wait for container to be ready
          echo "Waiting for container to initialize..."
          sleep 10

          # Check container status
          docker ps -a
          docker logs dspace-server --tail 20

          # Test SSH connectivity
          echo "Testing SSH connectivity..."
          for i in {1..30}; do
            if sshpass -p admin ssh -o StrictHostKeyChecking=no -p 2222 admin@localhost "echo 'SSH connection successful'" 2>/dev/null; then
              echo "✅ SSH connection established"
              break
            fi
            echo "Waiting for SSH to be ready... ($i/30)"
            sleep 2
          done

          echo "✅ Docker container with systemd is running"

      # ======================================================================
      # Step 4: Install Dependencies on Host
      # ======================================================================
      - name: "📦 Install Ansible and dependencies"
        run: |
          echo "================================================"
          echo "Installing Ansible and dependencies"
          echo "================================================"

          # Install sshpass for initial SSH connection
          sudo apt-get update
          sudo apt-get install -y sshpass

          # Install Ansible
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository --yes --update ppa:ansible/ansible
          sudo apt-get install -y ansible

          # Show versions
          ansible --version

          echo "✅ Dependencies installed"

      # ======================================================================
      # Step 5: Configure SSH and Ansible Inventory
      # ======================================================================
      - name: "🔑 Configure SSH and Ansible inventory"
        run: |
          echo "================================================"
          echo "Configuring SSH and Ansible"
          echo "================================================"

          # Generate SSH key
          ssh-keygen -t ed25519 -f ~/.ssh/id_ed25519 -N ""

          # Copy SSH key to container
          sshpass -p admin ssh-copy-id -o StrictHostKeyChecking=no -p 2222 admin@localhost

          # Test passwordless SSH
          ssh -o StrictHostKeyChecking=no -p 2222 admin@localhost "echo 'Passwordless SSH working'"

          # Create Ansible inventory for Docker container
          cat > ansible/inventory/docker.ini << 'EOF'
          [dspace_servers]
          dspace-server ansible_host=localhost ansible_port=2222 ansible_user=admin ansible_ssh_private_key_file=~/.ssh/id_ed25519

          [dspace_servers:vars]
          ansible_python_interpreter=/usr/bin/python3
          ansible_ssh_common_args='-o StrictHostKeyChecking=no'
          EOF

          # Test Ansible connection
          cd ansible
          ansible -i inventory/docker.ini dspace_servers -m ping
          ansible -i inventory/docker.ini dspace_servers -m shell -a "systemctl status"

          echo "✅ SSH and Ansible configured"

      # ======================================================================
      # Step 6: Run Installation Tests
      # ======================================================================
      - name: "🧪 Run DSpace installation (TEST MODE)"
        run: |
          echo "================================================"
          echo "Starting DSpace Installation Test"
          echo "Test Type: ${{ github.event.inputs.test_type || 'complete' }}"
          echo "Verbose: ${{ github.event.inputs.verbose || 'false' }}"
          echo "================================================"
          echo ""
          echo "⚠️  THIS IS A CI TEST ENVIRONMENT ⚠️"
          echo ""

          # Set verbose flag if requested
          if [ "${{ github.event.inputs.verbose }}" = "true" ]; then
            export ANSIBLE_VERBOSE="-vvv"
          else
            export ANSIBLE_VERBOSE="-v"
          fi

          # Debug: Check Docker container status
          echo "🔍 Checking Docker container status..."
          docker ps -a | grep dspace-server || echo "Container not found"

          # Debug: Test SSH connectivity
          echo "🔍 Testing SSH connectivity to container..."
          ssh -o StrictHostKeyChecking=no -p 2222 admin@localhost "echo 'SSH connection working'" || echo "SSH connection failed"

          # Debug: Test Ansible connectivity
          echo "🔍 Testing Ansible connectivity..."
          cd ansible
          ansible -i inventory/docker.ini dspace_servers -m ping || echo "Ansible ping failed"
          cd ..

          # Use Docker as provider (let Makefile handle inventory path)
          export PROVIDER=docker
          # Don't override ANSIBLE_INVENTORY, let Makefile handle it

          # Run the appropriate test
          TEST_TYPE="${{ github.event.inputs.test_type || 'complete' }}"

          case "$TEST_TYPE" in
            prerequisites)
              echo "📦 Testing prerequisites installation..."
              make update-apt
              make install-prerequisites
              ;;
            backend)
              echo "🔧 Testing backend installation..."
              make update-apt
              make install-prerequisites
              make install-dspace
              ;;
            complete)
              echo "🏗️ Testing complete installation..."
              make update-apt
              make install-complete
              ;;
          esac

          echo ""
          echo "✅ Installation test completed successfully!"

      # ======================================================================
      # Step 7: Validate Installation
      # ======================================================================
      - name: "✔️ Validate installation"
        if: success()
        run: |
          echo "================================================"
          echo "Validating DSpace Installation"
          echo "================================================"

          # Function to run commands in container
          container_exec() {
            ssh -o StrictHostKeyChecking=no -p 2222 admin@localhost "$1"
          }

          # Check services
          echo "🔍 Checking services..."
          container_exec "sudo systemctl is-active postgresql" && echo "✅ PostgreSQL is running" || echo "❌ PostgreSQL not running"
          container_exec "sudo systemctl is-active tomcat" && echo "✅ Tomcat is running" || echo "❌ Tomcat not running"
          container_exec "sudo systemctl is-active solr" && echo "✅ Solr is running" || echo "❌ Solr not running"

          # Check directories
          echo ""
          echo "📁 Checking directories..."
          container_exec "test -d /opt/dspace" && echo "✅ DSpace installed" || echo "❌ DSpace not found"
          container_exec "test -d /opt/solr" && echo "✅ Solr installed" || echo "❌ Solr not found"

          # Check database (if backend installed)
          if [[ "${{ github.event.inputs.test_type }}" != "prerequisites" ]]; then
            echo ""
            echo "🗄️ Checking database..."
            container_exec "sudo -u postgres psql -d dspace -c 'SELECT 1;'" && echo "✅ Database accessible" || echo "❌ Database not accessible"
          fi

          # Check frontend (if complete installation)
          if [[ "${{ github.event.inputs.test_type }}" == "complete" ]]; then
            echo ""
            echo "🌐 Checking frontend..."
            curl -s -o /dev/null -w "%{http_code}" http://localhost:4000 | grep -q "200\|302" && echo "✅ Frontend responding" || echo "⚠️ Frontend not responding"

            echo ""
            echo "🔗 Checking backend API..."
            curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/server/api | grep -q "200\|302" && echo "✅ Backend API responding" || echo "⚠️ Backend API not responding"
          fi

          echo ""
          echo "✅ Validation complete"

      # ======================================================================
      # Step 8: Collect Logs on Failure
      # ======================================================================
      - name: "📋 Collect logs on failure"
        if: failure()
        run: |
          echo "================================================"
          echo "Collecting logs for debugging"
          echo "================================================"

          # Create logs directory
          mkdir -p ci-logs

          # Get container logs
          docker logs dspace-server > ci-logs/container.log 2>&1

          # Collect DSpace logs
          ssh -o StrictHostKeyChecking=no -p 2222 admin@localhost \
            "sudo tar -czf /tmp/dspace-logs.tar.gz /opt/dspace/log/ 2>/dev/null || true"
          scp -o StrictHostKeyChecking=no -P 2222 admin@localhost:/tmp/dspace-logs.tar.gz ci-logs/ || true

          # Collect system logs
          ssh -o StrictHostKeyChecking=no -p 2222 admin@localhost \
            "sudo journalctl -xe --no-pager > /tmp/system.log"
          scp -o StrictHostKeyChecking=no -P 2222 admin@localhost:/tmp/system.log ci-logs/ || true

          # Collect service status
          ssh -o StrictHostKeyChecking=no -p 2222 admin@localhost \
            "sudo systemctl status postgresql tomcat solr --no-pager > /tmp/services.log 2>&1 || true"
          scp -o StrictHostKeyChecking=no -P 2222 admin@localhost:/tmp/services.log ci-logs/ || true

          # Show last 50 lines of logs in CI output
          echo ""
          echo "Recent system logs:"
          tail -n 50 ci-logs/system.log || true

          echo ""
          echo "Service status:"
          cat ci-logs/services.log || true

      # ======================================================================
      # Step 9: Upload Test Artifacts
      # ======================================================================
      - name: "💾 Upload test artifacts"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docker-test-logs-${{ github.run_number }}
          path: ci-logs/
          retention-days: 7
          if-no-files-found: ignore

      # ======================================================================
      # Step 10: Cleanup
      # ======================================================================
      - name: "🧹 Cleanup Docker container"
        if: always()
        run: |
          echo "================================================"
          echo "Cleaning up Docker container"
          echo "================================================"

          # Stop and remove container
          docker stop dspace-server || true
          docker rm dspace-server || true

          # Remove Docker image (optional, saves space)
          docker rmi dspace-ci-systemd || true

          echo "✅ Cleanup complete"

# ============================================================================
# End of Docker CI Testing Workflow
# ============================================================================