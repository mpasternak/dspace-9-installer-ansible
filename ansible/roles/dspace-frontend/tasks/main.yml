---
# Install Node.js
- name: Install Node.js dependencies
  apt:
    name:
      - curl
      - gnupg
      - ca-certificates
      - lsb-release
      - software-properties-common
    state: present
    update_cache: yes

- name: Add NodeSource GPG key
  apt_key:
    url: https://deb.nodesource.com/gpgkey/nodesource.gpg.key
    state: present

- name: Add NodeSource repository
  apt_repository:
    repo: "deb https://deb.nodesource.com/node_{{ nodejs_version }}.x {{ ansible_distribution_release }} main"
    state: present
    update_cache: yes

- name: Install Node.js
  apt:
    name: nodejs
    state: present
    update_cache: yes

- name: Install build tools for node-gyp
  apt:
    name:
      - build-essential
      - python3
    state: present

# Install PM2
- name: Install PM2 globally
  npm:
    name: pm2
    global: yes
    state: present

- name: Create PM2 log directory
  file:
    path: "{{ pm2_log_dir }}"
    state: directory
    owner: "{{ pm2_user }}"
    group: "{{ dspace_group }}"
    mode: '0755'

# Download DSpace Angular source
- name: Create frontend source directory
  file:
    path: "{{ dspace_frontend_source_dir }}"
    state: directory
    owner: "{{ dspace_user }}"
    group: "{{ dspace_group }}"
    mode: '0755'

- name: Download DSpace Angular from release
  block:
    - name: Download DSpace Angular release
      unarchive:
        src: "{{ dspace_frontend_release_url }}"
        dest: /tmp
        remote_src: yes
        owner: "{{ dspace_user }}"
        group: "{{ dspace_group }}"
      register: download_result

    - name: Move extracted files to source directory
      shell: |
        mv /tmp/dspace-angular-dspace-{{ dspace_frontend_version }}/* {{ dspace_frontend_source_dir }}/
        rm -rf /tmp/dspace-angular-dspace-{{ dspace_frontend_version }}
      args:
        creates: "{{ dspace_frontend_source_dir }}/package.json"
  when: dspace_frontend_source_type == "release"

- name: Clone DSpace Angular from GitHub
  git:
    repo: "{{ dspace_frontend_github_repo }}"
    dest: "{{ dspace_frontend_source_dir }}"
    version: "{{ dspace_frontend_github_branch }}"
    force: yes
  become_user: "{{ dspace_user }}"
  when: dspace_frontend_source_type == "github"

# Install dependencies and build
- name: Install npm dependencies
  npm:
    path: "{{ dspace_frontend_source_dir }}"
    state: present
  become_user: "{{ dspace_user }}"
  environment:
    NODE_OPTIONS: "--max-old-space-size=4096"

- name: Create production configuration
  template:
    src: config.prod.yml.j2
    dest: "{{ dspace_frontend_config_dir }}/config.prod.yml"
    owner: "{{ dspace_user }}"
    group: "{{ dspace_group }}"
    mode: '0644'
  notify: restart dspace-frontend

- name: Build DSpace Angular for production
  command: npm run build:prod
  args:
    chdir: "{{ dspace_frontend_source_dir }}"
  become_user: "{{ dspace_user }}"
  environment:
    NODE_OPTIONS: "--max-old-space-size=4096"
    NODE_ENV: "production"
  register: build_result
  changed_when: true

- name: Create PM2 ecosystem configuration
  template:
    src: dspace-ui.json.j2
    dest: "{{ dspace_frontend_source_dir }}/dspace-ui.json"
    owner: "{{ dspace_user }}"
    group: "{{ dspace_group }}"
    mode: '0644'
  notify: restart dspace-frontend

- name: Create symlink to frontend directory
  file:
    src: "{{ dspace_frontend_source_dir }}"
    dest: "{{ dspace_frontend_install_dir }}"
    state: link
    owner: "{{ dspace_user }}"
    group: "{{ dspace_group }}"

# Configure PM2 service
- name: Start DSpace frontend with PM2
  command: pm2 start dspace-ui.json
  args:
    chdir: "{{ dspace_frontend_source_dir }}"
  become_user: "{{ dspace_user }}"
  register: pm2_start
  changed_when: "'online' in pm2_start.stdout"
  ignore_errors: yes

- name: Save PM2 process list
  command: pm2 save
  become_user: "{{ dspace_user }}"
  changed_when: true

- name: Generate PM2 startup script
  command: pm2 startup systemd -u {{ dspace_user }} --hp /home/{{ dspace_user }}
  register: pm2_startup
  changed_when: true

- name: Enable PM2 startup on boot
  shell: "{{ pm2_startup.stdout_lines[-1] }}"
  when: pm2_startup.stdout_lines | length > 0
  become: yes
  changed_when: true

- name: Ensure PM2 service is enabled
  systemd:
    name: pm2-{{ dspace_user }}
    enabled: yes
    state: started
    daemon_reload: yes
  ignore_errors: yes

# Verification
- name: Wait for frontend to be ready
  wait_for:
    port: "{{ dspace_frontend_port }}"
    host: localhost
    delay: 10
    timeout: 60
  register: frontend_ready

- name: Test frontend endpoint
  uri:
    url: "http://localhost:{{ dspace_frontend_port }}/"
    method: GET
    status_code: 200
    timeout: 30
  register: frontend_test
  retries: 3
  delay: 10
  until: frontend_test.status == 200
  ignore_errors: yes

- name: Display frontend status
  debug:
    msg:
      - "DSpace Frontend Status:"
      - "  URL: http://localhost:{{ dspace_frontend_port }}"
      - "  Status: {{ 'Running' if frontend_test.status == 200 else 'Not responding' }}"
      - "  PM2 App Name: {{ pm2_app_name }}"
      - "  Process Manager: PM2"
  when: frontend_test is defined