---
- name: Check if running in Docker container
  stat:
    path: /.dockerenv
  register: dockerenv_check

- name: Check for Docker in cgroup (alternative detection)
  shell: cat /proc/1/cgroup | grep -q docker
  register: cgroup_docker_check
  failed_when: false
  changed_when: false

- name: Set Docker detection fact
  set_fact:
    is_docker: "{{ dockerenv_check.stat.exists or cgroup_docker_check.rc == 0 }}"

- name: Database initialization sequence
  block:
    - name: Get database info
      command: "{{ dspace_install_dir }}/bin/dspace database info"
      become: yes
      become_user: "{{ dspace_user }}"
      register: db_info
      changed_when: false
      failed_when: false

    - name: Display database info
      debug:
        msg: "{{ db_info.stdout_lines }}"
      when: db_info.stdout_lines is defined

    - name: Test database connection
      command: "{{ dspace_install_dir }}/bin/dspace database test"
      become: yes
      become_user: "{{ dspace_user }}"
      register: db_test
      changed_when: false
      failed_when: false

    - name: Display database test results
      debug:
        msg: "{{ db_test.stdout_lines }}"
      when: db_test.stdout_lines is defined

    - name: Run database migration (first pass - ignore errors)
      command: "{{ dspace_install_dir }}/bin/dspace database migrate"
      become: yes
      become_user: "{{ dspace_user }}"
      register: db_migrate_first
      ignore_errors: yes
      changed_when: true

    - name: Display first migration attempt results
      debug:
        msg:
          - "First migration attempt completed (errors ignored if any)"
          - "Return code: {{ db_migrate_first.rc }}"
      when: db_migrate_first is defined

    - name: Run database migration (second pass - must succeed)
      command: "{{ dspace_install_dir }}/bin/dspace database migrate"
      become: yes
      become_user: "{{ dspace_user }}"
      register: db_migrate_second
      failed_when: db_migrate_second.rc != 0

    - name: Display final migration results
      debug:
        msg: "Database migration completed successfully"
      when: db_migrate_second.rc == 0

- name: Copy Solr cores to Solr installation
  shell: cp -R {{ dspace_install_dir }}/solr/* /var/solr/data/
  become: yes
  notify: restart solr
  tags: solr_cores

- name: Set Solr cores ownership
  file:
    path: /var/solr/data
    owner: "{{ solr_user }}"
    group: "{{ solr_group }}"
    recurse: yes

- name: Check PostgreSQL service status
  systemd:
    name: postgresql
    state: started
  register: postgres_status

- name: Verify database connectivity
  command: "{{ dspace_install_dir }}/bin/dspace database test"
  become: yes
  become_user: "{{ dspace_user }}"
  register: db_test_before_admin
  changed_when: false
  retries: 3
  delay: 5
  until: db_test_before_admin.rc == 0

- name: Create DSpace administrator account
  command: >
    {{ dspace_install_dir }}/bin/dspace create-administrator
    -e "{{ dspace_admin_email }}"
    -f "{{ dspace_admin_firstname }}"
    -l "{{ dspace_admin_lastname }}"
    -p "{{ dspace_admin_password }}"
  become: yes
  become_user: "{{ dspace_user }}"
  register: create_admin

- name: Deploy DSpace server webapp via Tomcat context
  copy:
    content: |
      <?xml version='1.0'?>
      <Context docBase="{{ dspace_install_dir }}/webapps/server"/>
    dest: "{{ tomcat_home }}/conf/Catalina/localhost/server.xml"
    owner: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"
    mode: '0644'
  notify: restart tomcat

- name: Flush handlers to restart services
  meta: flush_handlers

- name: Wait for Tomcat to be fully started
  wait_for:
    port: "{{ tomcat_port }}"
    host: localhost
    delay: 10
    timeout: 60
    state: started

- name: Set up DSpace cron jobs
  cron:
    name: "{{ item.name }}"
    user: "{{ dspace_user }}"
    job: "{{ item.job }}"
    minute: "{{ item.minute | default('0') }}"
    hour: "{{ item.hour | default('*') }}"
    state: present
  with_items:
    - name: "DSpace filter-media"
      job: "{{ dspace_install_dir }}/bin/dspace filter-media"
      hour: "2"
    - name: "DSpace index-discovery"
      job: "{{ dspace_install_dir }}/bin/dspace index-discovery"
      hour: "3"
    - name: "DSpace cleanup"
      job: "{{ dspace_install_dir }}/bin/dspace cleanup"
      hour: "4"
  when: not is_docker

- name: Display DSpace installation info
  debug:
    msg:
      - "DSpace {{ dspace_version }} has been installed successfully!"
      - "Server URL: {{ dspace_server_url }}"
      - "Admin Email: {{ dspace_admin_email }}"
      - "Installation Directory: {{ dspace_install_dir }}"